package com.ly.proxy.proxy;

/**
 * @ProjectName: Java-Guide
 * @Package: com.ly.proxy.proxy
 * @ClassName: Client
 * @Author: lin
 * @Description: 代理模式的事例（静态代理）
 * @Date: 2019/7/30 21:45
 * @Version: 1.0
 */
public class Client {
    public static void main(String[] args) {
        Proxy proxy = new Proxy(new RealSubject());
        proxy.request();
    }

    /**
     * 代理模式的特点：
     *      代理模式在客户和被客户访问的对象之间，引入了一定程度的间接性，客户直接使用代理，让代理来与被访问的对象交互。不同的代理
     *      类型，这种附加的间接性有不同的用途，也就具体不同的特点。
     *      远程代理：隐藏一个对象存在于不同地址空间的事实，也即是客户通过远程代理去访问一个对象，根本就不关心这个对象在哪里，也就
     *      不关心如何通过网络去访问这个对象。从客户的角度来讲，他只是在使用代理对象而已。
     *      虚代理：可以根据需要来创建“大”对象，只有到必须创建的时候，才会创建对象，从而大大加快了程序的运行速度，并节省资源。通
     *      过虚代理可以对系统进行优化。
     *      保护代理：可以在执行一个对象的前后，附加很多的操作，除了进行权限控制之外，还可以进行很多跟业务相关的处理，而不需要修改
     *      被代理的对象。也就是说可以通过代理来给目标对象添加功能。
     *      智能引用：和保护代理类似，也是允许在访问一个对象的前后，执行很多的附加操作，这样一来就可以做很多额外的事情，比如：引入
     *      计数等。
     *
     * 代理模式的本质是：控制对象访问。
     * */
}
